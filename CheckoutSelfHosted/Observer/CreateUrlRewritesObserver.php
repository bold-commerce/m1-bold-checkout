<?php

/**
 * Create URL rewrites for self-hosted checkout observer.
 */
class Bold_CheckoutSelfHosted_Observer_CreateUrlRewritesObserver
{
    const SHOP_INFO_URL = 'shops/v1/info';
    /**
     * @var ['request_path' => 'target_path']
     */
    const PATHS = [
        'bold_platform/%s/experience/resume' => 'experience/index/index',
        'bold_platform/%s/experience/shipping_lines' => 'experience/index/index',
        'bold_platform/%s/experience/payment' => 'experience/index/index',
        'bold_platform/%s/experience/thank_you' => '/',
    ];

    /**
     * Create Bold Checkout Url Rewrites.
     *
     * @param Varien_Event_Observer $event
     * @return void
     * @throws Mage_Core_Exception
     */
    public function createCheckoutUrlRewrites(Varien_Event_Observer $event)
    {
        $event = $event->getEvent();
        /** @var Bold_Checkout_Model_Config $boldCheckoutConfig */
        $boldCheckoutConfig = Mage::getSingleton(Bold_Checkout_Model_Config::RESOURCE);
        $websiteId = $event->getWebsite()
            ? (int)Mage::app()->getWebsite($event->getWebsite())->getId()
            : (int)Mage::app()->getWebsite()->getId();
        if (!$boldCheckoutConfig->isCheckoutEnabled($websiteId)) {
            return;
        }
        $shopInfo = json_decode(
            Bold_Checkout_Client::call('GET', self::SHOP_INFO_URL, $websiteId)
        );
        if (isset($shopInfo->errors)) {
            $error = current($shopInfo->errors);
            Mage::throwException($error);
        }
        $storeId = (int)Mage::app()->getWebsite($websiteId)->getDefaultStore()->getId();
        $requestPaths = $this->getPaths($shopInfo);
        /** @var Mage_Core_Model_Resource_Url_Rewrite_Collection $urlRewritesCollection */
        $urlRewritesCollection = Mage::getModel('core/url_rewrite')->getCollection();
        $urlRewritesCollection->addFieldToFilter(
            'request_path',
            ['in' => array_keys($requestPaths)]
        );
        $urlRewritesCollection->addStoreFilter($storeId, false);
        foreach ($requestPaths as $requestPath => $targetPath) {
            foreach ($urlRewritesCollection as $existedUrlRewrite) {
                if ($existedUrlRewrite->getRequestPath() === $requestPath
                    && $existedUrlRewrite->getTargetPath() === $targetPath) {
                    continue 2;
                }
                if ($existedUrlRewrite->getRequestPath() === $requestPath
                    && $existedUrlRewrite->getTargetPath() !== $targetPath) {
                    $existedUrlRewrite->setTargetPath($targetPath);
                    $existedUrlRewrite->save($existedUrlRewrite);
                    continue 2;
                }
            }
            /** @var Mage_Core_Model_Url_Rewrite $urlRewrite */
            $urlRewrite = Mage::getModel('core/url_rewrite');
            $urlRewrite->setStoreId($storeId);
            $urlRewrite->setRequestPath($requestPath);
            $urlRewrite->setTargetPath($targetPath);
            $urlRewrite->setIsAutoGenerated(1);
            $urlRewrite->setRedirectType(301);
            $urlRewrite->setEntityType('custom');
            $urlRewrite->save();
        }
    }

    /**
     * Get formatted request paths.
     *
     * @param stdClass $shopInfo
     * @return array
     */
    private function getPaths(stdClass $shopInfo)
    {
        $requestPaths = [];
        foreach (self::PATHS as $requestPath => $targetPath) {
            $requestPaths[\sprintf($requestPath, $shopInfo->shop_domain)] = $targetPath;
        }
        return $requestPaths;
    }
}
