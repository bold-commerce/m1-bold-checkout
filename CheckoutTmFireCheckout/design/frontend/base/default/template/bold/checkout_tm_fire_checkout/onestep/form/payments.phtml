<?php
/**
 * Bold Payments iframe template for firecheckout onestep checkout.
 *
 * @var Bold_Checkout_Block_Form_Payments $this
 */
?>
<div id="bold-payments-container">
    <iframe id='PIGI' src='' width='100%' scrolling='no' height="0px" frameborder='0'></iframe>
</div>

<script>
    /**
     * Bold Checkout Storefront Client.
     *
     * Performs requests to Bold Storefront API to sync data during checkout.
     */
    BoldClient = Class.create({
        requestInProgress: false,
        requestQueue: [],
        jwtToken: "<?php echo $this->getJwtToken(); ?>",
        url: "<?php echo $this->getStoreFrontClientUrl(); ?>",

        /**
         * Initialize BoldClient.
         */
        init: function () {
            window.bold || (window.bold = {});
            this.address = new BoldAddress();
            this.customer = new BoldCustomer();
        },

        /**
         * Sync data with Bold Storefront API.
         *
         * @param dataType string - The data type to sync. Possible values: 'address', 'customer', 'refresh', 'taxes'.
         * @return {Promise}
         * @public
         */
        request: function (dataType) {
            return new Promise((resolve, reject) => {
                const request = {
                    'dataType': dataType,
                };
                this.requestQueue.push(request);
                this.processNextRequest(resolve, reject);
            });
        },

        /**
         * Process next request in requests queue.
         *
         * As Bold Storefront API allows only one request at a time, we need to process requests one by one.
         *
         * @param {Function} resolve - The function to call on success.
         * @param {Function} reject - The function to call on failure.
         * @returns {void}
         * @private
         */
        processNextRequest: function (resolve, reject) {
            if (this.requestInProgress || this.requestQueue.length === 0) {
                return;
            }
            this.requestInProgress = true;
            const nextRequest = this.requestQueue.shift();
            let newPayload = {};
            let path;
            let method;
            switch (nextRequest.dataType) {
                case 'address':
                    method = 'POST';
                    path = 'addresses/billing';
                    newPayload = this.address.getBillingAddress();
                    break;
                case 'customer':
                    method = 'POST';
                    path = 'customer/guest';
                    newPayload = this.customer.getCustomer();
                    break;
                case 'refresh':
                    method = 'GET';
                    path = 'refresh';
                    break;
                case 'taxes':
                    method = 'POST';
                    path = 'taxes';
                    break;
            }
            if (this.isAlreadySynced(newPayload, nextRequest.dataType)) {
                this.requestInProgress = false;
                this.processNextRequest(resolve, reject);
                return;
            }
            new Ajax.Request(
                this.url + path,
                {
                    method: method,
                    contentType: 'application/json',
                    requestHeaders: {
                        'Authorization': 'Bearer ' + this.jwtToken,
                        'Content-Type': 'application/json',
                    },
                    parameters: Object.toJSON(newPayload),
                    onSuccess: function (transport) {
                        const response = transport.responseText.evalJSON(true);
                        window.bold[nextRequest.dataType] = response.data[nextRequest.dataType];
                        this.requestInProgress = false;
                        resolve(response);
                        this.processNextRequest();
                    }.bind(this),
                    onFailure: function (error) {
                        this.requestInProgress = false;
                        reject(error);
                        this.processNextRequest();
                    }.bind(this)
                }
            );
        },

        /**
         * Compare new payload with saved payload to avoid duplicated requests.
         *
         * @param {{}}payload
         * @param dataType
         * @return {boolean}
         * @private
         */
        isAlreadySynced: function (payload, dataType) {
            if (!window.bold[dataType]) {
                return false;
            }
            for (let key in payload) {
                if (payload.hasOwnProperty(key) && key !== 'id' && window.bold[dataType][key] !== payload[key]) {
                    return false;
                }
            }
            return true;
        },
    });

    /**
     * Bold Billing Address class.
     *
     * Used to sync billing address data with Bold Storefront API.
     * Reads data from billing address fields and saved addresses.
     */
    BoldAddress = Class.create({
        allowedCountries: <?php echo $this->getAllowedCountries(); ?>,
        savedBillingAddress: <?php echo $this->getSavedAddresses(); ?>,
        billingAddressFields: {
            'first_name': 'billing:firstname',
            'last_name': 'billing:lastname',
            'business_name': 'billing:company',
            'address_line_1': 'billing:street1',
            'address_line_2': 'billing:street2',
            'city': 'billing:city',
            'province': 'billing:region',
            'province_code': 'billing:region_id',
            'postal_code': 'billing:postcode',
            'country_code': 'billing:country_id',
            'phone_number': 'billing:telephone',
        },

        /**
         * Get billing address payload for sync.
         *
         * @return object
         */
        getBillingAddress: function () {
            let billingAddressPayload = {};
            const billingAddressSelect = $('billing-address-select');
            if (billingAddressSelect && billingAddressSelect.getValue()) {
                try {
                    this.savedBillingAddress.forEach(function (address) {
                        if (address.id === Number(billingAddressSelect.getValue())) {
                            Object.keys(address).forEach(function (key) {
                                billingAddressPayload[key] = address[key];
                            });
                        }
                    }.bind(this));
                    billingAddressPayload['country'] = this.allowedCountries.find(
                        country => country.value === billingAddressPayload.country_code
                    ).label;
                    billingAddressPayload.id = null;
                    this.validateBillingAddressPayload(billingAddressPayload);
                } catch (e) {
                    billingAddressPayload = null;
                }
                if (billingAddressPayload) {
                    return billingAddressPayload;
                }
            }
            try {
                Object.keys(this.billingAddressFields).forEach(function (key) {
                    let field = this.billingAddressFields[key];
                    if ($(field)) {
                        billingAddressPayload[key] = $(field).value;
                    }
                }.bind(this));
                billingAddressPayload['country'] = this.allowedCountries.find(
                    country => country.value === billingAddressPayload.country_code
                ).label;
                billingAddressPayload.id = null;
                this.validateBillingAddressPayload(billingAddressPayload);
            } catch (e) {
                return null;
            }
            return billingAddressPayload;
        },

        /**
         * Checks if all required fields are filled and returns billing address payload for sync.
         *
         * @param payload object
         * @return void
         * @throws Error
         * @private
         */
        validateBillingAddressPayload: function (payload) {
            let requiredFields = [
                'first_name',
                'last_name',
                'postal_code',
                'phone_number',
                'country',
                'address_line_1',
                'city',
            ];
            requiredFields.each(function (field) {
                if (!payload[field]) {
                    throw new Error('Missing required field: ' + field);
                }
            })
        }
    });

    /**
     * Bold Customer class.
     *
     * Used to sync guest customer data with Bold Storefront API.
     * Reads data from guest customer fields.
     */
    BoldCustomer = Class.create({
        customerFields: {
            'email_address': 'billing:email',
            'first_name': 'billing:firstname',
            'last_name': 'billing:lastname',
        },

        /**
         * Checks if all required fields are filled and returns customer payload for sync.
         *
         * @return object
         */
        getCustomer: function () {
            const customerPayload = {};
            try {
                Object.keys(this.customerFields).forEach(function (key) {
                    let field = this.customerFields[key];
                    customerPayload[key] = $(field).value;
                }.bind(this));
                this.validateCustomerPayload(customerPayload);
            } catch (e) {
                return null;
            }
            return customerPayload;
        },

        /**
         * Validate customer payload.
         *
         * @param payload object
         * @return void
         * @throws Error
         * @private
         */
        validateCustomerPayload: function (payload) {
            let requiredFields = [
                'first_name',
                'last_name',
                'email_address'
            ];
            requiredFields.each(function (field) {
                if (!payload[field]) {
                    throw new Error('Missing required field: ' + field);
                }
            })
        }
    });

    /**
     * Observes checkout flow, sync data and sends capture payment event to PIGI iframe.
     */
    BoldPayment = Class.create({
        paymentType: null,
        customerIsGuest: <?php echo $this->customerIsGuest() ?>,
        /**
         * Initialize checkout flow observer.
         */
        init: function () {
            const iframeUrl = "<?php echo $this->getIframeUrl(); ?>";
            const boldPaymentsCheckbox = $('p_method_bold');
            if (!iframeUrl || !boldPaymentsCheckbox) {
                this.hideBoldPaymentBlock();
                return;
            }
            this.boldClient = new BoldClient();
            this.boldClient.init();
            this.initialDataSync();
            this.subscribeToPIGIEvents();
            this.subscribeToPlaceOrder();
            this.subscribeToBillingAddressFieldsChanges();
            if (this.customerIsGuest) {
                this.subscribeToGuestCustomerFieldsChanges();
            }
            this.updateBoldPaymentCheckbox(iframeUrl, boldPaymentsCheckbox);
        },
        /**
         * Sync customer and billing address data with Bold Storefront API.
         *
         * @returns {void}
         * @private
         */
        initialDataSync: function () {
            this.boldClient.request('address');
            if (this.customerIsGuest) {
                this.boldClient.request('customer');
            }
        },
        /**
         * Subscribe to billing address fields change event to sync data with Bold Storefront API.
         *
         * @returns {void}
         * @private
         */
        subscribeToBillingAddressFieldsChanges: function () {
            const billingAddressFields = [
                'billing:firstname',
                'billing:lastname',
                'billing:company',
                'billing:street1',
                'billing:street2',
                'billing:city',
                'billing:region',
                'billing:region_id',
                'billing:postcode',
                'billing:country_id',
                'billing:telephone',
                'billing:use_for_shipping_yes'
            ];
            billingAddressFields.each((field) => {
                if ($(field)) {
                    $(field).observe('change', () => {
                        this.boldClient.request('address');
                    });
                }
            });
        },
        /**
         * Subscribe to customer fields change event to sync data with Bold Storefront API.
         *
         * @returns {void}
         * @private
         */
        subscribeToGuestCustomerFieldsChanges: function () {
            const customerFields = [
                'billing:firstname',
                'billing:lastname',
                'billing:email',
            ];
            customerFields.each((field) => {
                if ($(field)) {
                    $(field).observe('change', () => {
                        this.boldClient.request('customer');
                    });
                }
            });
        },
        /**
         * Subscribes to place order event and sends capture event to PIGI iframe.
         *
         * @returns {void}
         * @private
         */
        subscribeToPlaceOrder: function () {
            document.observe('firecheckout:saveBefore', function (event) {
                const memo = event.memo;
                this.capturePayment(memo);
            }.bind(this));
        },
        /**
         * Subscribe to PIGI iframe events.
         *
         * @returns {void}
         * @private
         */
        subscribeToPIGIEvents: function () {
            window.addEventListener('message', ({data}) => {
                const type = data.responseType;
                const iframeElement = $('PIGI');
                if (type) {
                    switch (type) {
                        case 'PIGI_UPDATE_HEIGHT':
                            if (iframeElement.height === Math.round(data.payload.height) + 'px') {
                                return;
                            }
                            iframeElement.height = Math.round(data.payload.height) + 'px';
                            break;
                        case 'PIGI_INITIALIZED':
                            if (data.payload && data.payload.height) {
                                iframeElement.height = Math.round(data.payload.height) + 'px';
                            }
                            break;
                        case 'PIGI_ADD_PAYMENT':
                            this.processPIGIAddPaymentResponse(data.payload);
                            break;
                    }
                }
            });
        },
        /**
         * Process PIGI add payment response.
         *
         * If response is successful, refresh Bold order to get the latest cart data before processing the order.
         *
         * @param {{}}payload
         * @private
         */
        processPIGIAddPaymentResponse: function (payload) {
            if (!payload.success) {
                this.paymentType = null;
                checkout.setLoadWaiting(false);
                return;
            }
            this.paymentType = payload.paymentType;
            if (!checkout.loadWaiting) {
                checkout.setLoadWaiting('payment');
            }
            const errorMessage = "<?php echo $this->__('An error occurred while processing your payment. Please try again.'); ?>";
            // Refresh Bold order to get the latest cart data before processing the order.
            this.boldClient.request('refresh').then(function () {
                // Need to make this request to Bold Storefront API to
                // avoid error - "There was an error calculating the taxes" during 'process_order' request.
                this.boldClient.request('taxes').then(function () {
                    checkout.setLoadWaiting(false);
                    payment.save();
                }.bind(this)).catch(function () {
                    checkout.setLoadWaiting(false);
                    this.displayErrorMessage(errorMessage);
                }.bind(this));
            }.bind(this)).catch(function () {
                checkout.setLoadWaiting(false);
                this.displayErrorMessage(errorMessage);
            }.bind(this));
        },

        /**
         * Add event listener to payment checkboxes to show/hide PIGI iframe.
         *
         * @param {string} iframeUrl
         * @param {HTMLElement} boldPaymentsCheckbox
         * @returns {void}
         * @private
         */
        updateBoldPaymentCheckbox: function (iframeUrl, boldPaymentsCheckbox) {
            boldPaymentsCheckbox.checked = false;
            const paymentMethodsRadioButtons = document.querySelectorAll('input[type="radio"][name="payment[method]"]');
            paymentMethodsRadioButtons.forEach(function (radioButton) {
                radioButton.addEventListener('change', function () {
                    const boldRadioButton = document.getElementById('p_method_bold');
                    const paymentIframe = document.getElementById('PIGI');
                    boldRadioButton.checked ? paymentIframe.style.display = 'block' : paymentIframe.style.display = 'none';
                    if (boldRadioButton.checked && paymentIframe.src !== iframeUrl) {
                        paymentIframe.src = iframeUrl;
                        const iframeWindow = paymentIframe.contentWindow;
                        iframeWindow.postMessage({actionType: 'PIGI_REFRESH_ORDER'}, '*');
                    }
                });
            });
        },
        /**
         * Send capture payment event to PIGI iframe before order is placed.
         *
         * @private
         * @param {{}}memo
         * @return void
         */
        capturePayment: function (memo) {
            if (payment.currentMethod && payment.currentMethod !== 'bold') {
                return;
            }
            if (!this.paymentType) {
                checkout.setLoadWaiting(true);
                const iframeElement = $('PIGI');
                const iframeWindow = iframeElement.contentWindow;
                iframeWindow.postMessage({actionType: 'PIGI_REFRESH_ORDER'}, '*');
                const clearAction = {actionType: 'PIGI_CLEAR_ERROR_MESSAGES'};
                const addPaymentAction = {actionType: 'PIGI_ADD_PAYMENT'};
                iframeWindow.postMessage(clearAction, '*');
                iframeWindow.postMessage(addPaymentAction, '*');
                memo.stopFurtherProcessing = true;
                return;
            }
            this.paymentType = null;
        },
        /**
         * Hide bold payment block in case of error.
         *
         * @private
         */
        hideBoldPaymentBlock: function () {
            const dtElements = document.getElementsByTagName('dt') || [];
            let targetElement;
            for (let i = 0; i < dtElements.length; i++) {
                if (dtElements[i].querySelector('#p_method_bold')) {
                    targetElement = dtElements[i];
                    break;
                }
            }
            if (targetElement) {
                targetElement.style.display = 'none';
            }
        },

        /**
         * Display error message in PIGI iframe.
         *
         * @private
         * @param {string} message
         */
        displayErrorMessage: function (message) {
            const iframeElement = document.getElementById('PIGI');
            const iframeWindow = iframeElement.contentWindow;
            const action = {
                actionType: 'PIGI_DISPLAY_ERROR_MESSAGE',
                payload: {
                    error: {
                        message: message,
                        sub_type: 'string_to_categorize_error',
                    }
                }
            };
            iframeWindow.postMessage(action, '*');
        }
    });

    // Instantiate and initialize BoldPayment observer.
    const boldPayment = new BoldPayment();
    boldPayment.init();
</script>
